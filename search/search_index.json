{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library installed, we can get started experimenting with the breakout board. For the scope of this tutorial, we will highlight the examples. From there we will be able to build our own custom code to integrate the Qwiic Buzzer into a project.</p>"},{"location":"arduino_examples/#example-1-buzz","title":"Example 1: Buzz","text":"<p>In this example, we will show how to turn on and off the buzzer. This is similar to the classic \"blink\" sketch using an LED.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_01_Buzz. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board. You should hear the Qwiic buzzer turning on and off every second.</p>"},{"location":"arduino_examples/#example-2-buzz-frequency","title":"Example 2: Buzz Frequency","text":"<p>In this example, we will turn on and off the buzzer similar to the previous example. However, we will show how to adjust the frequency of the buzz every second.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_02_Buzz_Frequency. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>Try adjusting the frequency between values around <code>31</code> to <code>11000</code> to get the desired sound or <code>0</code> for a \"rest.\" Of course, <code>buzzer.configureBuzzer()</code> also accepts macros that were originally defined for pitches.h as well.</p> <p>Note</p> <p>The first parameter that `buzzer.configureBuzzer() takes is a unsigned 16-bit integer. Technically, the function can accept values between 0 to 65,535. However, the human hearing range is between 20 to 20,000 Hz. Testing the Qwiic Buzzer, we found that the range is between around 30Hz to 11,000Hz. Outside of this range, you would just hear a click.</p>"},{"location":"arduino_examples/#example-3-buzz-duration","title":"Example 3: Buzz Duration","text":"<p>In this example, we will turn on and off the buzzer similar to the previous two examples. However, will adjust the duration as well.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_03_Buzz_Duration. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>Try adjusting the second parameter for <code>buzzer.configureBuzzer()</code> duration in milliseconds. When the buzzer is on, you will want to be careful about the duration exceeding the <code>delay()</code> function. For example, if the duration is longer than the <code>delay()</code> and a second <code>buzzer.configureBuzzer()</code> is executed to make another note, the second <code>buzzer.configureBuzzer()</code> will \"over-write\" the previous note and play the second note.</p> <p>Note</p> <p>The second parameter that `buzzer.configureBuzzer()`` takes is also an unsigned 16-bit integer. The function can accept values between 0 to 65,535.</p>"},{"location":"arduino_examples/#example-4-buzz-volume","title":"Example 4: Buzz Volume","text":"<p>In this example, we will turn on and off the buzzer similar to the first example. However, we will toggle each transistor to increase the volume of the buzz.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_04_Buzz_Volume. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>Notice that the example code uses predefined macros to control each of the transistors: <code>SFE_QWIIC_BUZZER_VOLUME_MIN</code>, <code>SFE_QWIIC_BUZZER_VOLUME_LOW</code>, <code>SFE_QWIIC_BUZZER_VOLUME_MID</code>, <code>SFE_QWIIC_BUZZER_VOLUME_MAX</code>. To turn off all the transistors, you would use <code>SFE_QWIIC_BUZZER_VOLUME_OFF</code>. For users that are using a custom resistor or potentiometer, you will need to use the <code>SFE_QWIIC_BUZZER_VOLUME_MIN</code>. Just make sure to cut the jumper labeled as <code>JP1</code>.</p>"},{"location":"arduino_examples/#example-5-change-i2c-address","title":"Example 5: Change I2C Address","text":"<p>In this example, we will change the default address of the buzzer from 0x34 to a different value between ranging from 0x08 and 0x77.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_05_Change_I2C_Address. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>After uploading code, open the Arduino Serial Monitor and set it to 115200 baud. You will also need to specify the line ending by setting it to: <code>Both NL &amp; CR</code>. You will find this option to the left of the drop down menu for the baud rate.</p> <p>Send a new hexadecimal address ranging from 0x08 to  0x77, but without the prefix 0x. Let's follow the message that was output to the Arduino Serial Monitor by typing 5B and hitting the ENTER button.</p> <p>Once the address is changed, the example code will begin to search for any addresses on the I<sup>2</sup>C bus. You should be able to see the new address of the Qwiic Buzzer. Now that we have changed address, try looking at example 10 to see the how to connect Qwiic Buzzer with a new address.</p>"},{"location":"arduino_examples/#example-6-save-settings","title":"Example 6: Save Settings","text":"<p>In this example, we will show how to save settings to the buzzer. We will configure the buzzer, make a buzz, and save the settings to memory. Every time we configure the Qwiic Buzzer's characteristics (frequency, duration, or volume), the buzzer will continue to play a buzz with the same settings until we send the .configureBuzzer() function different values or when power is cycled.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_06_SaveSettings. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>Power cycle the Qwiic Buzzer. Grab a M/M jumper wire. Connect one end to any ground pin (GND). When ready, connect the other end of the jumper wire to the trigger pin (TRIG). You should be able to hear the same sound every time the pin is pulled low whenever power is removed.</p> <p>Note</p> <p>Pulling the trigger pin low as the board is initially powered up will factory reset the board.</p>"},{"location":"arduino_examples/#example-7-buzz-melody","title":"Example 7: Buzz Melody","text":"<p>In this example, we will play a melody once.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_07_Melody. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>After uploading code, you should hear the melody play one time.</p>"},{"location":"arduino_examples/#example-8-sound-effects","title":"Example 8: Sound Effects","text":"<p>In this example, we will play different sound effects once.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_08_Sound_Effects. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>After uploading code, sit back and enjoy the sweet sound effects!</p>"},{"location":"arduino_examples/#example-9-firmware-version","title":"Example 9: Firmware Version","text":"<p>In this example, we will check the firmware version that is flashed on the ATtiny84.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_09_FirmwareVersion. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>After uploading code, open the Arduino Serial Monitor and set it to 115200 baud. You should be able to see the current firmware loaded on the Qwiic Buzzer's ATtiny84.</p>"},{"location":"arduino_examples/#example-10-buzz-multiple","title":"Example 10: Buzz Multiple","text":"<p>In this example, we will show how to control two Qwiic Buzzers with different addresses. If you have not already, check out example 5 to change the address of one of the Qwiic Buzzers. This example expects two buzzers set to these unique I<sup>2</sup>C addresses: 0x34 and 0x5B.</p> <p>Open the example by heading to: File &gt; Examples &gt; Qwiic Buzzer &gt; Example_10_Buzz_Multiple. If you have not already, select your Board (in this case, the Arduino Uno), and associated COM port. Upload the code to the board.</p> <p>Once the code has been uploaded, the buzzer with default address will buzz first. The second buzzer with the other address will make a buzz shortly after before the code loops again.</p>"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>SparkFun has written a library to work with the Qwiic Buzzer. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Qwiic Buzzer\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Qwiic Buzzer Arduino Library (ZIP)"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the Qwiic Buzzer to an Arduino microcontroller.</p>"},{"location":"hardware_hookup/#connecting-to-the-qwiic-i2c-port","title":"Connecting to the Qwiic I<sup>2</sup>C Port","text":"<p>Insert a Qwiic cable between the Qwiic Buzzer and your Arduino microcontroller. Then connect a USB cable between the Arduino microcontroller and your computer's COM port. In this case, we used the RedBoard Plus with ATmega328P.</p> RedBoard ATmega328P Programmed with Arduino Connected to Qwiic Buzzer <p>With the Qwiic Buzzer, you can daisy chain more than one buzzer! Typically on an Arduino, you could only use the <code>tone()</code> function with one buzzer at a time and the function could also interfere with other PWM output pins as well. Controlling the Qwiic Buzzer through I<sup>2</sup>C allows you to play multiple buzzers simultaneously. Just make sure to configure the address of the buzzer and make another instance of any additional buzzer in the code should you decide to control each buzzer separately.</p> RedBoard ATmega328P Programmed with Arduino Connected Two Qwiic Buzzers <p>Note</p> <p>When daisy chaining both boards, you can control both simultaneously when using the same address.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs on the edge of the board, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>For the custom resistor, you will need to bend the resistor's terminals and insert it into the PTHs where it says USER. You can solder the terminals from the bottom or top. Depending on the size of the resistor, the resistor may not sit flush against the board. You may need to bend the terminals in and push the resistor to the side. The image shown below on the left shows a 1/4 watt resistor with thick leads not sitting flush against the footprint. For those inserting the  resistor from the bottom, make sure to have enough room to cut the jumper labeled as JP1 before soldering the resistor's terminals. Of course, make sure to cut off the excess terminals after soldering the resistor and carefully clean the board.</p> Cut JP1 Jumper Soldering Custom Resistor <p>Warning</p> <p>When cleaning the board, make sure that the buzzer is not submerged under water.</p> <p>You can also carefully pull the two inner pins out of a 1x4 standard male header pin using pliers, solder the remaining two into the board, and insert the Qwiic Buzzerinto a breadboard. This is useful for those interested in using a 10k\u03a9 potentiometer to control the volume.</p> Soldering 1x4 Header Pins (with Center Pins Pulled Out) Soldering Custom Resistor <p>Note</p> <p>By sacrificing two inner male pins from the 1x4 header, the remaining plastic spacers will help keep the single square pins in place as you solder them to the board.</p>"},{"location":"hardware_hookup/#stand-alone-mode","title":"Stand-Alone Mode","text":"<p>For users that simply need to trigger a beeping noise, all you need to do is power the Qwiic Buzzer and ground the trigger pin! If you have a 3.3V voltage regulator, simply connect 3.3V and ground to the Qwiic Buzzer. Then connect the TRIG pin to GND using either a momentary button or jumper wire.</p> SparkFun Buck Regulator Breakout3.3V (AP63203) Pins              Button              Qwiic BuzzerPins              3V3 3V3 GND Common GND Normally Open (NO) TRIG Toggling Trigger Pin with a Button SparkFun Buck Regulator Breakout3.3V (AP63203) Pins              Button              10k\u03a9 Trim Pot              Qwiic BuzzerPins              3V3 3V3 GND Common GND Normally Open (NO) TRIG Pin 2(i.e. Center Pin) USER PTH 1(The PTH closestto the Buzzer) Pin 1 or 3 USER PTH 2(The PTH closestto the Qwiic Connector) Toggling Trigger Pin with a Button While Controlling Volume with 10k\u03a9 Trimpot"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic Buzzer.</p> Top View Bottom View"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a few power-related nets broken out to Qwiic connectors and through hole pads. The recommended input voltage is 3.3V. The logic levels for the Qwiic Buzzer is 3.3V.</p> <ul> <li>3V3 \u2014 This connects to the 3.3V net. This net should only be provided with a clean 3.3V power signal. This is also connected to the Qwiic connectors.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power Nets Highlighted(Top View) Power Nets Highlighted(Bottom View) <p>Note</p> <p>While the ATtiny84 microcontroller can handle a voltage between 1.1V to 5.5V, we recommend only using 3.3V due to the fact that the Qwiic port's I<sup>2</sup>C data lines use are typically interfacing with a 3.3V system.</p>"},{"location":"hardware_overview/#buzzer","title":"Buzzer","text":"<p>Note</p> <p>Interested in the difference between a magnetic and piezo buzzer? Check out the article from CUI Devices: \"Buzzer Basics - Technologies, Tones, and Drive Circuits\".</p> <p>The board would not be the Qwiic Buzzer without... a buzzer! The buzzer uses a small magnetic coil to vibrate a metal disc inside the plastic housing. By pulsating current through the coil at different rates, we can produce different frequencies (pitches) of sound.</p> Buzzer Highlighted(Top View) <p>Power and control is applied to the buzzer with a set of BJTs. At full volume, it allows the full current of about ~95mA, which makes it really loud. Typically, power and control is directly connected to microcontrollers GPIO, which limits the current to ~40mA. A flyback diode is included to discharge any energy remaining when the buzzer is shut off.</p>"},{"location":"hardware_overview/#attiny84","title":"ATtiny84","text":"<p>The brains of the Qwiic Buzzer users an ATtiny84. This IC comes pre-programmed with custom firmware designed to interact with the Arduino Library. The ATtiny84 accepts I<sup>2</sup>C reads and writes, interprets them, and creates sound by sending a PWM signal to the buzzer. The volume of the buzzer is typically controlled using a variable resistor like a potentiometer. However, four GPIOs, NPN transistors, and resistors are used to provide 7 levels of loudness.</p> ATTiny84 Highlighted(Top View) <p>Where's SPI?!?</p> <p>This board was designed to control the buzzer via I<sup>2</sup>C. While you can access the SPI pins with the help of the Eagle schematic and board files (e.g. TRIG = POCI, SDA = PICO, and SCL = SCK), these pins are only used for advanced users and programing the AVR microcontroller using custom firmware. For more information about programming an ATtiny84, check out our Tiny AVR Programmer Hookup Guide.</p>"},{"location":"hardware_overview/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on one side of the board. These indicate the I<sup>2</sup>C data and clock lines and are connected to two 2.2k\u03a9 pull-up resistors. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock</li> <li>SDA \u2014 I<sup>2</sup>C data</li> </ul> I<sup>2</sup>C PTHs Highlighted(Top View) Qwiic and I<sup>2</sup>C PTHs Highlighted(Bottom View) <p>The default I<sup>2</sup>C address for the Qwiic buzzer is 0x34. This can also be software configured.</p>"},{"location":"hardware_overview/#broken-out-pins","title":"Broken Out Pins","text":"<ul> <li>TRIG \u2014 The trigger pin enables users to active the buzzer without an I<sup>2</sup>C whenever the pin is pulled low. This pin also has an alternative function. Pulling the trigger pin low as the board is initially powered up will factory reset the board.</li> <li>RST \u2014 The reset pin resets the ATTiny84 when the pin is pulled low.</li> </ul> Trigger &amp; Reset PTHs Highlighted(Top View) Trigger &amp; Reset PTHs Highlighted(Bottom View)"},{"location":"hardware_overview/#user-resistor","title":"User Resistor","text":"<p>There is a footprint available for a PTH resistor. This is labeled as USER. For users interested in including a custom resistor to control the loudness of the buzzer, you can solder a PTH resistor to the two PTHs. Note that you would need to cut the jumper on the back of the board (labeled as JP1) if you are not using the onboard 2.2k\u03a9 SMD resistor.</p> User Resistor PTHs Highlighted(Top View) User Resistor PTHs Highlighted(Bottom View)"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 The power LED lights up when the board is powered. This LED is connected the 3.3V net. This LED can be disabled with the PWR jumper on the bottom of the board.</li> <li>STAT \u2014 The status LED lights up whenever the buzzer is active. This adds a nice visual indicator whenever there is noise.</li> </ul> LEDs Highlighted(Top View)"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>PWR_LED \u2014 The power LED will illuminate when 3.3V is available either over the Qwiic bus or the 3V3 pin. By default, this jumper is closed. Cut this jumper to disable the LED.</li> <li>STAT \u2014 The status LED will illuminate whenever the buzzer is making noise. By default, this jumper is closed. Cut this jumper to disable the LED.</li> <li>I2C \u2014 This three way jumper labeled I2C is connected to two pull-up resistors on the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>JP1 \u2014 This jumper pad is available for users that want include a custom resistor to control the loudness of the buzzer. Cut this jumper to disconnect resistor R15. You will need to have a resistor populated for the USER PTH resistor.</li> </ul> Jumpers Highlighted(Bottom View)"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board uses the standard 1.0\" x 1.0\" (25.4mm x 25.4mm) Qwiic board. There are 4x mounting holes by each corner of the board.</p> Board Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>Beep-boop! The SparkFun Qwiic Buzzer adds simple beeps and buzzes to your projects via I<sup>2</sup>C! Make some noises to alert you when something interesting (or terrible) happens. Simply connect a Qwiic cable and load up some pre-written code to an Arduino to start making noises! For those that want a simple buzz without an Arduino, you can also make noise by simply grounding the trigger pin!</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic Buzzer    BOB-24474    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over the examples to get started!</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>SparkFun Qwiic Buzzer [BOB-24474]</li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Buzzer    BOB-24474 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    KIT-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those connecting to the PTHs on the edge of the board or adding a custom resistor, you will need the following parts. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Multicolor Buttons - 4-pack    PRT-14460 </p> </li> </ul> <ul> <li> <p> </p> <p> Resistor Kit - 1/4W (500 total)    PRT-10969 </p> </li> </ul> <ul> <li> <p> </p> <p> Resistor Kit - 1/4W (500 total)    COM-09806 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> RedBoard Plus Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Buzzer up and running, it's time to incorporate it into your own project! This board is great for adding a simple audible sound to your projects. Pair board with the Qwiic RTC to make an alarm clock, play a tune with the Qwiic RFID, or add a sound effect to your robot. So what are you waiting for?!? Start making some noise in your projects with the SparkFun Qwiic Buzzer! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet<ul> <li>ATtiny84</li> <li>CBT-09427-SMT-TR Magnetic Buzzer</li> </ul> </li> <li>Qwiic Info Page</li> <li>Arduino Library</li> <li>ReadtheDocs: Qwiic Buzzer</li> <li>Qwiic Buzzer Python Package</li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out this blog post for ideas.</p> <ul> <li> <p> </p> <p> Raising your Buzzer Projects to the Next Level </p> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>Beep-boop! The SparkFun Qwiic Buzzer adds simple beeps and buzzes to your projects via I<sup>2</sup>C! Make some noises to alert you when something interesting (or terrible) happens. Simply connect a Qwiic cable and load up some pre-written code to an Arduino to start making noises! For those that want a simple buzz without an Arduino, you can also make noise by simply grounding the trigger pin!</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic Buzzer    BOB-24474    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over the examples to get started!</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>SparkFun Qwiic Buzzer [BOB-24474]</li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Buzzer    BOB-24474 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    KIT-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those connecting to the PTHs on the edge of the board or adding a custom resistor, you will need the following parts. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Multicolor Buttons - 4-pack    PRT-14460 </p> </li> </ul> <ul> <li> <p> </p> <p> Resistor Kit - 1/4W (500 total)    PRT-10969 </p> </li> </ul> <ul> <li> <p> </p> <p> Resistor Kit - 1/4W (500 total)    COM-09806 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> RedBoard Plus Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic Buzzer.</p> Top View Bottom View"},{"location":"single_page/#power","title":"Power","text":"<p>There are a few power-related nets broken out to Qwiic connectors and through hole pads. The recommended input voltage is 3.3V. The logic levels for the Qwiic Buzzer is 3.3V.</p> <ul> <li>3V3 \u2014 This connects to the 3.3V net. This net should only be provided with a clean 3.3V power signal. This is also connected to the Qwiic connectors.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power Nets Highlighted(Top View) Power Nets Highlighted(Bottom View) <p>Note</p> <p>While the ATtiny84 microcontroller can handle a voltage between 1.1V to 5.5V, we recommend only using 3.3V due to the fact that the Qwiic port's I<sup>2</sup>C data lines use are typically interfacing with a 3.3V system.</p>"},{"location":"single_page/#buzzer","title":"Buzzer","text":"<p>Note</p> <p>Interested in the difference between a magnetic and piezo buzzer? Check out the article from CUI Devices: \"Buzzer Basics - Technologies, Tones, and Drive Circuits\".</p> <p>The board would not be the Qwiic Buzzer without... a buzzer! The buzzer uses a small magnetic coil to vibrate a metal disc inside the plastic housing. By pulsating current through the coil at different rates, we can produce different frequencies (pitches) of sound.</p> Buzzer Highlighted(Top View) <p>Power and control is applied to the buzzer with a set of BJTs. At full volume, it allows the full current of about ~95mA, which makes it really loud. Typically, power and control is directly connected to microcontrollers GPIO, which limits the current to ~40mA. A flyback diode is included to discharge any energy remaining when the buzzer is shut off.</p>"},{"location":"single_page/#attiny84","title":"ATtiny84","text":"<p>The brains of the Qwiic Buzzer users an ATtiny84. This IC comes pre-programmed with custom firmware designed to interact with the Arduino Library. The ATtiny84 accepts I<sup>2</sup>C reads and writes, interprets them, and creates sound by sending a PWM signal to the buzzer. The volume of the buzzer is typically controlled using a variable resistor like a potentiometer. However, four GPIOs, NPN transistors, and resistors are used to provide 7 levels of loudness.</p> ATTiny84 Highlighted(Top View) <p>Where's SPI?!?</p> <p>This board was designed to control the buzzer via I<sup>2</sup>C. While you can access the SPI pins with the help of the Eagle schematic and board files (e.g. TRIG = POCI, SDA = PICO, and SCL = SCK), these pins are only used for advanced users and programing the AVR microcontroller using custom firmware. For more information about programming an ATtiny84, check out our Tiny AVR Programmer Hookup Guide.</p>"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on one side of the board. These indicate the I<sup>2</sup>C data and clock lines and are connected to two 2.2k\u03a9 pull-up resistors. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock</li> <li>SDA \u2014 I<sup>2</sup>C data</li> </ul> I<sup>2</sup>C PTHs Highlighted(Top View) Qwiic and I<sup>2</sup>C PTHs Highlighted(Bottom View) <p>The default I<sup>2</sup>C address for the Qwiic buzzer is 0x34. This can also be software configured.</p>"},{"location":"single_page/#broken-out-pins","title":"Broken Out Pins","text":"<ul> <li>TRIG \u2014 The trigger pin enables users to active the buzzer without an I<sup>2</sup>C whenever the pin is pulled low. This pin also has an alternative function. Pulling the trigger pin low as the board is initially powered up will factory reset the board.</li> <li>RST \u2014 The reset pin resets the ATTiny84 when the pin is pulled low.</li> </ul> Trigger &amp; Reset PTHs Highlighted(Top View) Trigger &amp; Reset PTHs Highlighted(Bottom View)"},{"location":"single_page/#user-resistor","title":"User Resistor","text":"<p>There is a footprint available for a PTH resistor. This is labeled as USER. For users interested in including a custom resistor to control the loudness of the buzzer, you can solder a PTH resistor to the two PTHs. Note that you would need to cut the jumper on the back of the board (labeled as JP1) if you are not using the onboard 2.2k\u03a9 SMD resistor.</p> User Resistor PTHs Highlighted(Top View) User Resistor PTHs Highlighted(Bottom View)"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 The power LED lights up when the board is powered. This LED is connected the 3.3V net. This LED can be disabled with the PWR jumper on the bottom of the board.</li> <li>STAT \u2014 The status LED lights up whenever the buzzer is active. This adds a nice visual indicator whenever there is noise.</li> </ul> LEDs Highlighted(Top View)"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>PWR_LED \u2014 The power LED will illuminate when 3.3V is available either over the Qwiic bus or the 3V3 pin. By default, this jumper is closed. Cut this jumper to disable the LED.</li> <li>STAT \u2014 The status LED will illuminate whenever the buzzer is making noise. By default, this jumper is closed. Cut this jumper to disable the LED.</li> <li>I2C \u2014 This three way jumper labeled I2C is connected to two pull-up resistors on the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>JP1 \u2014 This jumper pad is available for users that want include a custom resistor to control the loudness of the buzzer. Cut this jumper to disconnect resistor R15. You will need to have a resistor populated for the USER PTH resistor.</li> </ul> Jumpers Highlighted(Bottom View)"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board uses the standard 1.0\" x 1.0\" (25.4mm x 25.4mm) Qwiic board. There are 4x mounting holes by each corner of the board.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the Qwiic Buzzer to an Arduino microcontroller.</p>"},{"location":"single_page/#connecting-to-the-qwiic-i2c-port","title":"Connecting to the Qwiic I<sup>2</sup>C Port","text":"<p>Insert a Qwiic cable between the Qwiic Buzzer and your Arduino microcontroller. Then connect a USB cable between the Arduino microcontroller and your computer's COM port. In this case, we used the RedBoard Plus with ATmega328P.</p> RedBoard ATmega328P Programmed with Arduino Connected to Qwiic Buzzer <p>With the Qwiic Buzzer, you can daisy chain more than one buzzer! Typically on an Arduino, you could only use the <code>tone()</code> function with one buzzer at a time and the function could also interfere with other PWM output pins as well. Controlling the Qwiic Buzzer through I<sup>2</sup>C allows you to play multiple buzzers simultaneously. Just make sure to configure the address of the buzzer and make another instance of any additional buzzer in the code should you decide to control each buzzer separately.</p> RedBoard ATmega328P Programmed with Arduino Connected Two Qwiic Buzzers <p>Note</p> <p>When daisy chaining both boards, you can control both simultaneously when using the same address.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs on the edge of the board, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>For the custom resistor, you will need to bend the resistor's terminals and insert it into the PTHs where it says USER. You can solder the terminals from the bottom or top. Depending on the size of the resistor, the resistor may not sit flush against the board. You may need to bend the terminals in and push the resistor to the side. The image shown below on the left shows a 1/4 watt resistor with thick leads not sitting flush against the footprint. For those inserting the  resistor from the bottom, make sure to have enough room to cut the jumper labeled as JP1 before soldering the resistor's terminals. Of course, make sure to cut off the excess terminals after soldering the resistor and carefully clean the board.</p> Cut JP1 Jumper Soldering Custom Resistor <p>Warning</p> <p>When cleaning the board, make sure that the buzzer is not submerged under water.</p> <p>You can also carefully pull the two inner pins out of a 1x4 standard male header pin using pliers, solder the remaining two into the board, and insert the Qwiic Buzzerinto a breadboard. This is useful for those interested in using a 10k\u03a9 potentiometer to control the volume.</p> Soldering 1x4 Header Pins (with Center Pins Pulled Out) Soldering Custom Resistor <p>Note</p> <p>By sacrificing two inner male pins from the 1x4 header, the remaining plastic spacers will help keep the single square pins in place as you solder them to the board.</p>"},{"location":"single_page/#stand-alone-mode","title":"Stand-Alone Mode","text":"<p>For users that simply need to trigger a beeping noise, all you need to do is power the Qwiic Buzzer and ground the trigger pin! If you have a 3.3V voltage regulator, simply connect 3.3V and ground to the Qwiic Buzzer. Then connect the TRIG pin to GND using either a momentary button or jumper wire.</p> SparkFun Buck Regulator Breakout3.3V (AP63203) Pins              Button              Qwiic BuzzerPins              3V3 3V3 GND Common GND Normally Open (NO) TRIG Toggling Trigger Pin with a Button SparkFun Buck Regulator Breakout3.3V (AP63203) Pins              Button              10k\u03a9 Trim Pot              Qwiic BuzzerPins              3V3 3V3 GND Common GND Normally Open (NO) TRIG Pin 2(i.e. Center Pin) USER PTH 1(The PTH closestto the Buzzer) Pin 1 or 3 USER PTH 2(The PTH closestto the Qwiic Connector) Toggling Trigger Pin with a Button While Controlling Volume with 10k\u03a9 Trimpot"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>SparkFun has written a library to work with the Qwiic Buzzer. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Qwiic Buzzer\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Qwiic Buzzer Arduino Library (ZIP)"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>--8&lt;-- \"./docs/arduino_examples.md</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Buzzer up and running, it's time to incorporate it into your own project! This board is great for adding a simple audible sound to your projects. Pair board with the Qwiic RTC to make an alarm clock, play a tune with the Qwiic RFID, or add a sound effect to your robot. So what are you waiting for?!? Start making some noise in your projects with the SparkFun Qwiic Buzzer! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet<ul> <li>ATtiny84</li> <li>CBT-09427-SMT-TR Magnetic Buzzer</li> </ul> </li> <li>Qwiic Info Page</li> <li>Arduino Library</li> <li>ReadtheDocs: Qwiic Buzzer</li> <li>Qwiic Buzzer Python Package</li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out this blog post for ideas.</p> <ul> <li> <p> </p> <p> Raising your Buzzer Projects to the Next Level </p> </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Buzzer repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic Buzzer repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Buzzer repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the Qwiic Buzzer repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}